public class Dealer {
	
	String playerName;
	int numberOfCards;
	int cardNumericValue;
	int totalPoints;
	int tempTotal;
	int tempTotal2;
	
	
	/**
	 * Constructor: Dealer
	 * @param name calls for players name
	 * @param handNum calls for the number of cards in the players hand
	 */
	public Dealer (String name, int handNum)
	{
		this.playerName = name;
		this.numberOfCards = handNum;
	}
	
	/**
	 * Method: getName
	 * @return playerName returns playername
	 */
	public String getName()
	{
		return(this.playerName);
	}
	
	/**
	 * Method: getNumberOfCards()
	 * @return numberOfCards returns the number of cards in a players hand
	 */
	public int getNumberOfCards()
	{
		return(this.numberOfCards);
	}
	
	/**
	 * Method: setPointsTotal is a dynamic method to keep a current account of points when called upon
	 * ------- see comments throughout this method for information on the individual pieces -------
	 */
	public void setPointsTotal()
	{
		int[] cardNumeric = new int[numberOfCards]; // establishes a dynamic array based upon the..
							    // number of cards in a players hand
		int i;
		this.totalPoints = 0;
		this.tempTotal = 0;
		this.tempTotal2 = 0;
		
		//sets the players card which is derived from a number to a separate numeric value array
		for (i = 0; i <cardNumeric.length; i++)
		{
			//cardNumeric[i] = playerCard[i];
			//I had to comment out the above line of code(L54) because I could find no
			//return method for individual cards.
			// Senore Laprade, this is why I need the individual card return method from Player
			
			//if the card is an ace...
			if (cardNumeric[i] == 1 || cardNumeric[i] ==11)
			{
				System.out.println("Ace in hand");
				
				//temporary total to determine whethere the ace should be a 1 or 11
				int x;
				for (x = 0; x <cardNumeric.length; x++)
				{
					this.tempTotal += cardNumeric[x];
				}	
				
				// if the total with the ace having a one point value is less than 11...
				if (tempTotal >= 1 && tempTotal <=10)
				{
					//then the ace has a point value of 11
					cardNumeric[i] = 11;		
				}
				
				//temporary total to determine whethere the ace should be a 1 or 11 (doublecheck)
				int y;
				for (y = 0; y <cardNumeric.length; y++)
				{
					this.tempTotal2 += cardNumeric[y];
				}
				
				// if the total with the ace being an 11 is over 21 then...
				if (tempTotal2 >= 11 && tempTotal2 <21)
				{
					//sets the ace's point value back to a one
					cardNumeric[i] = 1;
				}
				
				// if both temporary totals are over 21, meaning that regardless of whether the
				// ace is a 1 or 11 the point total will be over 21, then outputs bust.
				else if (tempTotal2 >21 && tempTotal >21)
				{
					System.out.print(playerName + " has bust.");
				}
			}
			
			//final point output with the ace changed to appropriate value
			this.totalPoints +=cardNumeric[i];	
		}		
	}
	
	/**
	 * Method: getPointsTotal returns the point value of a hand
	 * @return this.totalPoins returns the points from the method above
	 */
	public int getPointsTotal()
	{
		return(this.totalPoints);
	}
	
	
	
	
	
	
	
	
	
	
}
